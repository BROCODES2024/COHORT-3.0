Notes: 
link : https://petal-estimate-4e9.notion.site/React-Part-1-1177dfd1073580069172fc54e33929c0

1. Starting a react project locally:
    - There are various ways to bootstrap a react project locally. Vite is the most widely used one today.
    - Command : npm create vite@latest
    enter project name , select react,select javascript, cd xxx(project name), npm install,npm run dev

2. Components:
    - In React, components are the building blocks of the user interface. They allow you to split the UI into independent, reusable pieces that can be thought of as custom, self-contained HTML elements.

3. useState Hook: 
    - useState is a Hook that lets you add state to functional components. It returns an array with the current state and a function to update it.

4. useEffect Hook:
    - useEffect is a Hook that lets you perform side effects in functional components. It can be used for data fetching, subscriptions, or manually changing the DOM.

    - Side effects of useEffect: Side effects are operations that interact with the outside world or have effects beyond the component's rendering. Examples include:
        - Fetching data from an API.
        - Modifying the DOM manually.
        - Subscribing to events (like WebSocket connections, timers, or browser events).
        - Starting a clock
        - These are called side effects because they don't just compute output based on the inputâ€”they affect things outside the component itself.

    - Problem in running side effects in React components: If we try to introduce side effects directly in the rendering logic of a component (in the return statement or before it), React would run that code every time the component renders. This can lead to:
        - Unnecessary or duplicated effects (like multiple API calls).
        - Inconsistent behavior (side effects might happen before rendering finishes).
        - Performance issues (side effects could block rendering or cause excessive re-rendering).

There are three stages in a component lifecycle 
mounting : his is when a component is initialized and inserted into the DOM for first time.
re-rendering : This occurs when a component's state or props change, triggering a re-render.
unmounting : This happens when a component is removed from the DOM.

while mounting happens only then the code inside the useEffect runs 
after mounting ie while re rendering the code inside useeffect doesnt run
ie the logic inside useeffect runs only once and it like react remembers it and keeps using it and makes changes but it doesnt call it everytime.

conditional rendering: renders based on a condition like clock runs for 5 seconds and then desnt work for 5 seconds and this repeats
